/**
 * This is a multiline comment
 * Variables - you store values and retreive later
 * 
 * keywords: used to declare variables
 *   >>let 
 *   >>var
 *   >> const
 * 
 * let x = 9;
 * let y = 18;
 * 
 * console.log(x+y);
 * 
 * A variable is a pointer to a memory
 * 
 * break: Terminates a loop or switch statement.

case: Used in a switch statement to specify different code blocks to be executed.

catch: Catches errors generated by try...catch statements.

class: Declares a class in JavaScript.

const: Declares a constant variable.

continue: Skips the rest of the loop and continues with the next iteration.

debugger: Invokes any available debugging functionality.

default: Specifies the default block of code in a switch statement.

delete: Deletes a property from an object.

do: Creates a do...while loop.

else: Specifies a block of code to be executed if a condition is false.

export: Used to export functions, objects, or primitive values from a module.

extends: Extends a class (used in class declarations).

finally: Specifies a block of code to be executed after try...catch, regardless of the result.

for: Creates a for loop.

function: Declares a function.

if: Specifies a block of code to be executed if a condition is true.

import: Used to import functions, objects, or primitive values into a module.

in: Checks if a specified property is in an object.

instanceof: Checks if an object is an instance of a specified object type.

let: Declares a block-scoped variable.

new: Creates an instance of a user-defined object type or of one of the built-in object types.

return: Exits a function and specifies the value to be returned.

super: Refers to the parent class in a class constructor.

switch: Evaluates an expression, matches the expression's value to a case clause, and executes the associated block of code.

this: Refers to the current object.

throw: Throws a user-defined exception.

try: Implements error handling to a block of code.

typeof: Returns a string indicating the type of a variable.

var: Declares a variable.

void: Specifies that a function should not return a value.

while: Creates a while loop.

with: Specifies a default object for a block of code.

yield: Pauses and resumes a generator function.
 * 

Variables are used to store and manage data in a program.
Unlike some other programming languages, JavaScript is loosely 
typed, which means you don't have to declare the data type of a
variable explicitly. You use the var, let, or const keyword to 
declare variables.
 * Primitive Data Types:

Number: Represents numeric values. It can be an integer or a floating-point number.

javascript
Copy code
let num = 42;        // integer
let floatNum = 3.14;  // floating-point number
String: Represents textual data. Strings are enclosed in single or double quotes.

javascript
Copy code
let text = "Hello, World!";
Boolean: Represents either true or false.

javascript
Copy code
let isTrue = true;
let isFalse = false;
Undefined: Represents a variable that has been declared but not assigned a value.

javascript
Copy code
let undefinedVar;
Null: Represents the intentional absence of any object value.

javascript
Copy code
let nullVar = null;
Symbol: Introduced in ECMAScript 6 (ES6), symbols are unique and immutable values.

javascript
Copy code
let sym = Symbol("unique");
Object Data Type:

Object: Represents a collection of key-value pairs. Objects can hold any data type, including other objects.
javascript
Copy code
let person = {
  name: "John",
  age: 30,
  isStudent: false
};
Special Data Types:

Function: Functions in JavaScript are a special type of object. They can be assigned to variables, passed as arguments, and returned from other functions.

javascript
Copy code
function add(a, b) {
  return a + b;
}
Array: Represents an ordered list of values.

javascript
Copy code
let numbers = [1, 2, 3, 4, 5];
Date: Represents a date and time.

javascript
Copy code
let today = new Date();
JavaScript is a dynamically typed language, meaning you don't need to explicitly 
specify the data type when declaring a variable; the interpreter infers it at runtime. 
Additionally, JavaScript has some methods and operators for type conversion and manipulation, 
allowing you to work with different data types in a flexible manner.
 */

let first_Name = "Sam";
let last_Name = "Wanyua";

let full_Name = first_Name + last_Name;

console.log(full_Name)

console.log(read+y)
console.log(y)
console.log(read)

<iframe width="1366" height="768" src="https://www.youtube.com/embed/G3e-cpL7ofc" title="HTML &amp; CSS Full Course - Beginner to Pro" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>